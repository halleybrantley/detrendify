
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> # Fit quantile trends on week of data
> # Halley Brantley
> ################################################################################
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 3.1.0     ✔ purrr   0.2.5
✔ tibble  1.4.2     ✔ dplyr   0.7.7
✔ tidyr   0.8.2     ✔ stringr 1.3.1
✔ readr   1.1.1     ✔ forcats 0.3.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(devtools)
> library(Hmisc)
Loading required package: lattice
Loading required package: survival
Loading required package: Formula

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:dplyr’:

    src, summarize

The following objects are masked from ‘package:base’:

    format.pval, units

> library(fields)
Loading required package: spam
Loading required package: dotCall64
Loading required package: grid
Spam version 2.2-0 (2018-06-19) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: maps

Attaching package: ‘maps’

The following object is masked from ‘package:purrr’:

    map

See www.image.ucar.edu/~nychka/Fields for
 a vignette and other supplements. 

Attaching package: ‘fields’

The following object is masked from ‘package:Hmisc’:

    describe

> library(gurobi)
Loading required package: slam
> load_all("detrendr")
Loading detrendr

Attaching package: ‘testthat’

The following object is masked from ‘package:fields’:

    describe

The following object is masked from ‘package:Hmisc’:

    describe

The following objects are masked from ‘package:devtools’:

    setup, test_file

The following object is masked from ‘package:dplyr’:

    matches

The following object is masked from ‘package:purrr’:

    is_null

> rm(list=ls())
> 
> i = 2
> spod <- read.csv(sprintf("../SPod/SPod_week/SENTINEL Data_2017-03-0%d.csv",i), 
+                  header=TRUE,  na.strings = "N/A")
> spod$time <- as.POSIXct(strptime(as.character(spod$TimeStamp), 
+                                  format= "%m/%d/%Y %H:%M:%S")) 
> nodes <- c("c", "e")
> spodPIDs <- as.data.frame(spod[, paste(nodes, "SPOD.PID..V.", sep=".")])
> names(spodPIDs) <- nodes
> spodPIDs$c <- spodPIDs$c/1000
> spodPIDs$e <- spodPIDs$e/1000
> spodPIDs$time <- spod$time
> 
> qsreg_trends <- data.frame(time = spodPIDs$time, c_0.1 = NA, 
+                         c_0.15 = NA,  e_0.1 = NA, e_0.15 = NA)
> spod_trends <- data.frame(time = spod$time)
> window_size <- 5000
> overlap <- 1000
> max_iter <- 30
> tau <- c(0.1, 0.15)
> 
> t1 <- Sys.time()
> for (j in 1:12){
+   ind_start <- (j-1)*7200 + 1
+   ind_end <- min(nrow(spodPIDs), j*7200)
+   x <- seq(ind_start, ind_end, 1)
+   n <- length(x)
+   trends <- data.frame(time = spodPIDs$time[ind_start:ind_end])
+   for (node in nodes){
+     trend <- matrix(NA, n, length(tau))
+     for (i in 1:length(tau)){
+       fit_qsreg <- qsreg(x, spodPIDs[ind_start:ind_end,node], 
+                          maxit.cv = 50, 
+                        alpha=tau[i], hmin = -6, hmax = NA)
+       trend[,i] <- predict(fit_qsreg)   
+     }
+     trends <- cbind(trends, as.data.frame(trend))
+     names(trends)[(ncol(trends)-(length(tau)-1)):ncol(trends)] <-
+       paste(node, tau, sep = "_")
+   }
+   qsreg_trends[ind_start:ind_end, ] <- trends
+ }
> 
> for (node in nodes){
+   result <- get_windows_BIC(y=spodPIDs[,node], tau, k=3, window_size, overlap,
+                             lambdaSeq = seq(12,19,1),
+                             df_tol = 1e-9,
+                             gamma = 1,
+                             plot_lambda = FALSE,
+                             solver = NULL,
+                             criteria = "eBIC", 
+                             max_iter = max_iter, 
+                             rho = 1, 
+                             update = 1)
+   spod_trends <- cbind(spod_trends, as.data.frame(result$trend))
+   names(spod_trends)[(ncol(spod_trends)-length(tau)+1):ncol(spod_trends)] <-
+     paste(node, tau, sep = "_")
+ }
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
[1] "Iteration: 1 Primal Resid Norm: 16.9707 eps_pri: 27.5582, Dual Resid Norm: 9.6131  eps_dual 20.8761"
[1] "Iteration: 2 Primal Resid Norm: 6.5938 eps_pri: 27.5582, Dual Resid Norm: 6.8938  eps_dual 20.9126"
[1] "Converged in 2 iterations"
[1] "i=1 lambda=12.000000"
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
[1] "Iteration: 1 Primal Resid Norm: 16.2483 eps_pri: 27.8101, Dual Resid Norm: 9.8223  eps_dual 20.8665"
[1] "Iteration: 2 Primal Resid Norm: 6.3110 eps_pri: 27.8101, Dual Resid Norm: 6.7876  eps_dual 20.8840"
[1] "Converged in 2 iterations"
[1] "i=2 lambda=13.000000"
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
[1] "Iteration: 1 Primal Resid Norm: 16.6241 eps_pri: 27.9252, Dual Resid Norm: 10.0421  eps_dual 20.8652"
[1] "Iteration: 2 Primal Resid Norm: 6.3173 eps_pri: 27.9252, Dual Resid Norm: 6.8011  eps_dual 20.8773"
[1] "Converged in 2 iterations"
[1] "i=3 lambda=14.000000"
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
[1] "Iteration: 1 Primal Resid Norm: 16.3070 eps_pri: 28.1143, Dual Resid Norm: 10.0735  eps_dual 20.8638"
[1] "Iteration: 2 Primal Resid Norm: 6.3407 eps_pri: 28.1143, Dual Resid Norm: 6.7677  eps_dual 20.8730"
[1] "Converged in 2 iterations"
[1] "i=4 lambda=15.000000"
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles

Execution halted
