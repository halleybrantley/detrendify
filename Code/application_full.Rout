
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> # Fit quantile trends on full application dataset
> # Halley Brantley
> ################################################################################
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 3.1.0     ✔ purrr   0.2.5
✔ tibble  1.4.2     ✔ dplyr   0.7.7
✔ tidyr   0.8.2     ✔ stringr 1.3.1
✔ readr   1.1.1     ✔ forcats 0.3.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(devtools)
> library(Hmisc)
Loading required package: lattice
Loading required package: survival
Loading required package: Formula

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:dplyr’:

    src, summarize

The following objects are masked from ‘package:base’:

    format.pval, units

> load_all("detrendr")
Loading detrendr
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:tidyr’:

    expand


Attaching package: ‘testthat’

The following object is masked from ‘package:Hmisc’:

    describe

The following objects are masked from ‘package:devtools’:

    setup, test_file

The following object is masked from ‘package:dplyr’:

    matches

The following object is masked from ‘package:purrr’:

    is_null

> rm(list=ls())
> spod <- read.csv("../SPod/fhrdata_2017-11-30.csv", 
+                  header=TRUE,  na.strings = "N/A")
> spod$time <- as.POSIXct(strptime(as.character(spod$TimeStamp), 
+                                  format= "%m/%d/%Y %H:%M:%S")) 
> 
> window_size <- 5000
> overlap <- 500
> max_iter <- 20
> tau <- c(0.05, 0.1, 0.15)
> k <- 3
> spod_trends <- data.frame(time = spod$time)
> 
> 
> for (node in c("f", "g", "h")){
+   pidCol <- paste(node, "SPOD.PID..V.", sep=".")
+   spodNode <- spod[, c("time", pidCol)]
+   names(spodNode)[2] <- c("pid")
+   spodNode$pid <- spodNode$pid/1000
+   result <- get_windows_BIC(spodNode$pid, tau, k, window_size, overlap,
+                           lambdaSeq = window_size^seq(0.8, 1.5, length.out=10),
+                           df_tol = 1e-9,
+                           gamma = 1,
+                           plot_lambda = FALSE,
+                           solver = NULL,
+                           criteria = "eBIC", 
+                           max_iter = max_iter)
+   save(result, file=sprintf("../SPod/node_%s_trend.RData", node))
+   spod_trends <- cbind(spod_trends, as.data.frame(result$trend))
+   names(spod_trends)[(ncol(spod_trends)-length(tau)+1):ncol(spod_trends)] <-
+     paste(node, tau, sep = "_")
+ }
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Loading required package: gurobi
Loading required package: slam
[1] "Iteration: 5 Primal Resid Norm: 0.4600 eps_pri: 0.8372, Dual Resid Norm: 1.5646  eps_dual 0.8363"
[1] "Iteration: 10 Primal Resid Norm: 0.3670 eps_pri: 0.8372, Dual Resid Norm: 1.0594  eps_dual 0.8368"
[1] "Iteration: 15 Primal Resid Norm: 0.3261 eps_pri: 0.8372, Dual Resid Norm: 0.8853  eps_dual 0.8372"
[1] "Converged in 17 iterations"
[1] "i=1 lambda=910.282102"
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
[1] "Iteration: 5 Primal Resid Norm: 0.4824 eps_pri: 0.8373, Dual Resid Norm: 1.6966  eps_dual 0.8365"
[1] "Iteration: 10 Primal Resid Norm: 0.4108 eps_pri: 0.8373, Dual Resid Norm: 1.1067  eps_dual 0.8370"
[1] "Iteration: 15 Primal Resid Norm: 0.3625 eps_pri: 0.8373, Dual Resid Norm: 1.0136  eps_dual 0.8375"
[1] "Iteration: 20 Primal Resid Norm: 0.3337 eps_pri: 0.8373, Dual Resid Norm: 0.8327  eps_dual 0.8378"
[1] "Converged in 20 iterations"
[1] "i=2 lambda=1765.524182"
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
