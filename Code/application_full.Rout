
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> # Fit quantile trends on full application dataset
> # Halley Brantley
> ################################################################################
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 3.1.0     ✔ purrr   0.2.5
✔ tibble  1.4.2     ✔ dplyr   0.7.7
✔ tidyr   0.8.2     ✔ stringr 1.3.1
✔ readr   1.1.1     ✔ forcats 0.3.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(devtools)
> library(Hmisc)
Loading required package: lattice
Loading required package: survival
Loading required package: Formula

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:dplyr’:

    src, summarize

The following objects are masked from ‘package:base’:

    format.pval, units

> load_all("detrendr")
Loading detrendr
Re-compiling detrendr
  ─  installing *source* package ‘detrendr’ ... (484ms)
     ** libs
     g++  -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/include" -DNDEBUG -DARMA_64BIT_WORD=1 -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/library/Rcpp/include" -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/library/RcppArmadillo/include" -I/usr/local/include  -std=c++11 -fpic  -O2  -UNDEBUG -Wall -pedantic -g -O0 -c RcppExports.cpp -o RcppExports.o
     g++  -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/include" -DNDEBUG -DARMA_64BIT_WORD=1 -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/library/Rcpp/include" -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/library/RcppArmadillo/include" -I/usr/local/include  -std=c++11 -fpic  -O2  -UNDEBUG -Wall -pedantic -g -O0 -c getDk.cpp -o getDk.o
     g++  -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/include" -DNDEBUG -DARMA_64BIT_WORD=1 -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/library/Rcpp/include" -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/library/RcppArmadillo/include" -I/usr/local/include  -std=c++11 -fpic  -O2  -UNDEBUG -Wall -pedantic -g -O0 -c prox.cpp -o prox.o
     g++  -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/include" -DNDEBUG -DARMA_64BIT_WORD=1 -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/library/Rcpp/include" -I"/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/library/RcppArmadillo/include" -I/usr/local/include  -std=c++11 -fpic  -O2  -UNDEBUG -Wall -pedantic -g -O0 -c spingarn.cpp -o spingarn.o
     g++ -shared -L/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/lib -L/usr/local/lib64 -L/lib64 -o detrendr.so RcppExports.o getDk.o prox.o spingarn.o -Wl,--no-as-needed -lmkl_gf_lp64 -Wl,--start-group -lmkl_gnu_thread -lmkl_core -Wl,--end-group -fopenmp -ldl -lpthread -lm -lgfortran -lm -lquadmath -L/usr/local/apps/R/gcc_4.8.5/R-3.5.1/lib64/R/lib -lR
     installing to /gpfs_common/share02/triclustering/hlbrantl/tmp/RtmpedTHiR/devtools_install_35eb4539bb05/detrendr/libs
  ─  DONE (detrendr)

Attaching package: ‘testthat’

The following object is masked from ‘package:Hmisc’:

    describe

The following objects are masked from ‘package:devtools’:

    setup, test_file

The following object is masked from ‘package:dplyr’:

    matches

The following object is masked from ‘package:purrr’:

    is_null

> rm(list=ls())
> spod <- read.csv("../SPod/SENTINEL Data_2017-04-13.csv", 
+                  header=TRUE,  na.strings = "N/A")
> spod$time <- as.POSIXct(strptime(as.character(spod$TimeStamp), 
+                                  format= "%m/%d/%Y %H:%M:%S")) 
> 
> surge0 <- which(spod$d.SPOD.Sonic.Voltage > 14)
> surge <- c()
> for (i in seq(-70, 70, 1)){
+   surge <- c(surge, surge0+i)
+ }
> surge <- unique(surge)
> 
> nodes <- c("c", "d", "e")
> spodPIDs <- as.data.frame(spod[, paste(nodes, "SPOD.PID..V.", sep=".")])
> names(spodPIDs) <- nodes
> spodPIDs$time <- spod$time
> spodPIDs$d[surge] <- NA
> for (node in nodes){
+   spodPIDs[,node] <- (spodPIDs[,node] - min(spodPIDs[,node], na.rm=T))*5/
+     (max(spodPIDs[,node], na.rm=T)-min(spodPIDs[,node], na.rm=T))
+ }
> save(spodPIDs, file = "../SPod/spodPIDs.RData")
> 
> window_size <- 5000
> overlap <- 1000
> max_iter <- 30
> tau <- c(0.1, 0.15)
> k <- 3
> spod_trends <- data.frame(time = spod$time)
> 
> for (node in c("c", "d", "e")){
+   spodNode <- spodPIDs[, c("time", node)]
+   names(spodNode)[2] <- c("pid")
+   result <- get_windows_BIC(spodNode$pid, tau, k, window_size, overlap,
+                           lambdaSeq = exp(seq(12,19,1)),
+                           df_tol = 1e-9,
+                           gamma = 1,
+                           plot_lambda = TRUE,
+                           solver = NULL,
+                           criteria = "eBIC", 
+                           max_iter = max_iter, 
+                           rho = 1, 
+                           update = 2)
+   save(result, file=sprintf("../SPod/node_%s_trend.RData", node))
+   spod_trends <- cbind(spod_trends, as.data.frame(result$trend))
+   names(spod_trends)[(ncol(spod_trends)-length(tau)+1):ncol(spod_trends)] <-
+     paste(node, tau, sep = "_")
+ }
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Loading required package: gurobi
Loading required package: slam
[1] "Iteration: 2 Primal Resid Norm: 20.1091 eps_pri: 24.5881, Dual Resid Norm: 17.4363  eps_dual 20.9017"
[1] "Converged in 2 iterations"
[1] "i=1 lambda=162754.791419"
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
Using same lambda for all quantiles
[1] "Iteration: 2 Primal Resid Norm: 23.0263 eps_pri: 24.6670, Dual Resid Norm: 20.3827  eps_dual 20.9265"
[1] "Converged in 2 iterations"
[1] "i=2 lambda=442413.392009"
Using same lambda for all quantiles
Using same lambda for all quantiles
